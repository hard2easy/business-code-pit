AsyncAppender
    includeCallerData 用于控制是否收集调用方数据，默认是 false，
        此时方法行号、方法名等信息将不能显示（源码第 2 行以及 7 到 11 行）。
    queueSize 用于控制阻塞队列大小，使用的 ArrayBlockingQueue 阻塞队列（源码第 15 到 17 行），
        默认大小是 256，即内存中最多保存 256 条日志。
    discardingThreshold 是控制丢弃日志的阈值，主要是防止队列满后阻塞。
        默认情况下，队列剩余量低于队列长度的 20%，就会丢弃 TRACE、DEBUG 和 INFO 级别的日志。
        （参见源码第 3 到 6 行、18 到 19 行、26 到 27 行、33 到 34 行、40 到 42 行）
    neverBlock 用于控制队列满的时候，加入的数据是否直接丢弃，不会阻塞等待，
        默认是 false（源码第 44 到 68 行）。
        这里需要注意一下 offer 方法和 put 方法的区别，当队列满的时候 offer 方法不阻塞，
        而 put 方法会阻塞；neverBlock 为 true 时，使用 offer 方法

public class AsyncAppender extends AsyncAppenderBase<ILoggingEvent> {
    boolean includeCallerData = false;//是否收集调用方数据
    protected boolean isDiscardable(ILoggingEvent event) {
        Level level = event.getLevel();
        return level.toInt() <= Level.INFO_INT;//丢弃<=INFO级别的日志
    }
    protected void preprocess(ILoggingEvent eventObject) {
        eventObject.prepareForDeferredProcessing();
        if (includeCallerData)
            eventObject.getCallerData();
    }
}
public class AsyncAppenderBase<E> extends UnsynchronizedAppenderBase<E> implements AppenderAttachable<E> {

    BlockingQueue<E> blockingQueue;//异步日志的关键，阻塞队列
    public static final int DEFAULT_QUEUE_SIZE = 256;//默认队列大小
    int queueSize = DEFAULT_QUEUE_SIZE;
    static final int UNDEFINED = -1;
    int discardingThreshold = UNDEFINED;
    boolean neverBlock = false;//控制队列满的时候加入数据时是否直接丢弃，不会阻塞等待

    @Override
    public void start() {
         ...
        blockingQueue = new ArrayBlockingQueue<E>(queueSize);
        if (discardingThreshold == UNDEFINED)
            discardingThreshold = queueSize / 5;//默认丢弃阈值是队列剩余量低于队列长度的20%，参见isQueueBelowDiscardingThreshold方法
        ...
    }

    @Override
    protected void append(E eventObject) {
        if (isQueueBelowDiscardingThreshold() && isDiscardable(eventObject)) { //判断是否可以丢数据
            return;
        }
        preprocess(eventObject);
        put(eventObject);
    }

    private boolean isQueueBelowDiscardingThreshold() {
        return (blockingQueue.remainingCapacity() < discardingThreshold);
    }

    private void put(E eventObject) {
        if (neverBlock) { //根据neverBlock决定使用不阻塞的offer还是阻塞的put方法
            blockingQueue.offer(eventObject);
        } else {
            putUninterruptibly(eventObject);
        }
    }
    //以阻塞方式添加数据到队列
    private void putUninterruptibly(E eventObject) {
        boolean interrupted = false;
        try {
            while (true) {
                try {
                    blockingQueue.put(eventObject);
                    break;
                } catch (InterruptedException e) {
                    interrupted = true;
                }
            }
        } finally {
            if (interrupted) {
                Thread.currentThread().interrupt();
            }
        }
    }
}

异步记录日志出现坑的原因:
    queueSize 设置得特别大，就可能会导致 OOM。
        queueSize 设置得比较小（默认值就非常小），
        且 discardingThreshold 设置为大于 0 的值（或者为默认值），
        队列剩余容量少于 discardingThreshold 的配置就会丢弃 <=INFO 的日志。
        这里的坑点有两个。
            一是，因为 discardingThreshold 的存在，
                设置 queueSize 时容易踩坑。比如，本例中最大日志并发是 1000，
                即便设置 queueSize 为 1000 同样会导致日志丢失。
            二是，discardingThreshold 参数容易有歧义，它不是百分比，而是日志条数。、
                对于总容量 10000 的队列，如果希望队列剩余容量少于 1000 条的时候丢弃，
                需要配置为 1000。
    neverBlock 默认为 false，意味着总可能会出现阻塞。
        如果 discardingThreshold 为 0，那么队列满时再有日志写入就会阻塞；
        如果 discardingThreshold 不为 0，也只会丢弃 <=INFO 级别的日志，
            那么出现大量错误日志时，还是会阻塞程序。
可以看出 queueSize、discardingThreshold 和 neverBlock 这三个参数息息相关，
务必按需进行设置和取舍，到底是性能为先，还是数据不丢为先：
如果考虑绝对性能为先：
    那就设置 neverBlock 为 true，永不阻塞。
如果考虑绝对不丢数据为先:
    那就设置 discardingThreshold 为 0，即使是 <=INFO 的级别日志也不会丢，
    但最好把 queueSize 设置大一点，毕竟默认的 queueSize 显然太小，太容易阻塞。
如果希望兼顾两者:
    可以丢弃不重要的日志，把 queueSize 设置大一点，
    再设置一个合理的 discardingThreshold。
以上就是日志配置最常见的两个误区了

